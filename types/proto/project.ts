// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/project.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "project";

export interface ProjectRequest {
  projectId: number;
}

export interface ProjectResponse {
  projectId: number;
  name: string;
  deccription: string;
}

export interface CreateProjectRequest {
  name: string;
  deccription: string;
}

export const PROJECT_PACKAGE_NAME = "project";

export interface ProjectServiceClient {
  getProject(request: ProjectRequest): Observable<ProjectResponse>;

  create(request: CreateProjectRequest): Observable<ProjectResponse>;
}

export interface ProjectServiceController {
  getProject(request: ProjectRequest): Promise<ProjectResponse> | Observable<ProjectResponse> | ProjectResponse;

  create(request: CreateProjectRequest): Promise<ProjectResponse> | Observable<ProjectResponse> | ProjectResponse;
}

export function ProjectServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProject", "create"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROJECT_SERVICE_NAME = "ProjectService";
