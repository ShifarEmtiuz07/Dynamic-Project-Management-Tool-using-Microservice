// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/task.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "task";

export interface User {
  id: number;
  username: string;
  role: string;
}

export interface Task {
  id: number;
  title: string;
  requiredSkills: string[];
  priority: string;
  status: string;
  users: User[];
}

export interface CreateTaskRequest {
  title: string;
  requiredSkills: string[];
  priority: string;
  status: string;
  assignedTo: number[];
}

export interface CreateTaskResponse {
  task: Task | undefined;
}

export interface GetTaskRequest {
  id: number;
}

export interface GetTaskResponse {
  task: Task | undefined;
}

export interface UpdateTaskRequest {
  id: number;
  title: string;
  requiredSkills: string[];
  priority: string;
  status: string;
  assignedTo: number[];
}

export interface UpdateTaskResponse {
  task: Task | undefined;
}

export interface DeleteTaskRequest {
  id: number;
}

export interface DeleteTaskResponse {
  success: boolean;
}

/** Optional: Add filters or pagination if needed */
export interface ListTasksRequest {
}

export interface ListTasksResponse {
  tasks: Task[];
}

// export interface AddUserToTaskRequest {
//   taskId: number;
//   userId: number;
// }

// export interface AddUserToTaskResponse {
//   task: Task | undefined;
// }

export interface RemoveUserFromTaskRequest {
  taskId: number;
  userId: number;
}

export interface RemoveUserFromTaskResponse {
  task: Task | undefined;
}

export const TASK_PACKAGE_NAME = "task";

export interface TaskServiceClient {
  createTask(request: CreateTaskRequest): Observable<CreateTaskResponse>;

  getTask(request: GetTaskRequest): Observable<GetTaskResponse>;

  updateTask(request: UpdateTaskRequest): Observable<UpdateTaskResponse>;

  deleteTask(request: DeleteTaskRequest): Observable<DeleteTaskResponse>;

  listTasks(request: ListTasksRequest): Observable<ListTasksResponse>;
}

export interface TaskServiceController {
  createTask(
    request: CreateTaskRequest,
  ): Promise<CreateTaskResponse> | Observable<CreateTaskResponse> | CreateTaskResponse;

  getTask(request: GetTaskRequest): Promise<GetTaskResponse> | Observable<GetTaskResponse> | GetTaskResponse;

  updateTask(
    request: UpdateTaskRequest,
  ): Promise<UpdateTaskResponse> | Observable<UpdateTaskResponse> | UpdateTaskResponse;

  deleteTask(
    request: DeleteTaskRequest,
  ): Promise<DeleteTaskResponse> | Observable<DeleteTaskResponse> | DeleteTaskResponse;

  listTasks(request: ListTasksRequest): Promise<ListTasksResponse> | Observable<ListTasksResponse> | ListTasksResponse;
}

export function TaskServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createTask", "getTask", "updateTask", "deleteTask", "listTasks"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TaskService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TaskService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TASK_SERVICE_NAME = "TaskService";
