// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "user";

export enum Role {
  ROLE_UNSPECIFIED = 0,
  Manager = 1,
  TeamLead = 2,
  TeamMember = 3,
  Hr = 4,
  Admin = 5,
  UNRECOGNIZED = -1,
}

export interface User {
  id: number;
  userName: string;
  userImage: string;
  employeeId: string;
  email: string;
  phone: string;
  currentTask: number;
  maxTask: number;
  status: boolean;
  roles: Role[];
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface CreateUserRequest {
  userName: string;
  userImage: string;
  employeeId: string;
  email: string;
  phone: string;
  password: string;
  currentTask: number;
  maxTask: number;
  status: boolean;
  roles: Role[];
}

export interface UpdateUserRequest {
  id: number;
  userName: string;
  userImage: string;
  employeeId: string;
  email: string;
  phone: string;
  currentTask: number;
  maxTask: number;
  status: boolean;
  roles: Role[];
}

export interface UserId {
  id: number;
}

export interface UserList {
  users: User[];
}

/** Empty message (for listing) */
export interface Empty {
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<User>;

  getUser(request: UserId): Observable<User>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  deleteUser(request: UserId): Observable<User>;

  listUsers(request: Empty): Observable<UserList>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): Promise<User> | Observable<User> | User;

  getUser(request: UserId): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest): Promise<User> | Observable<User> | User;

  deleteUser(request: UserId): Promise<User> | Observable<User> | User;

  listUsers(request: Empty): Promise<UserList> | Observable<UserList> | UserList;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUser", "updateUser", "deleteUser", "listUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
